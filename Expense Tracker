import java.io.*;
import java.time.LocalDate;
import java.time.Month;
import java.util.*;

public class ExpenseTracker {
    private static final Scanner scanner = new Scanner(System.in);
    private static final List<Expense> expenses = new ArrayList<>();
    private static final String FILE_NAME = "expenses.txt";
    private static double monthlyBudget = 0;

    public static void main(String[] args) {
        loadExpensesFromFile();

        int choice;
        do {
            System.out.println("\n=== Personal Expense Tracker ===");
            System.out.println("1. Add Expense");
            System.out.println("2. View All Expenses");
            System.out.println("3. Filter by Month");
            System.out.println("4. Show Total Expenses");
            System.out.println("5. Set Monthly Budget");
            System.out.println("6. Save & Exit");
            System.out.print("Choose option: ");
            choice = scanner.nextInt();
            scanner.nextLine(); // consume newline

            switch (choice) {
                case 1 -> addExpense();
                case 2 -> viewExpenses();
                case 3 -> filterByMonth();
                case 4 -> showTotalExpenses();
                case 5 -> setMonthlyBudget();
                case 6 -> saveExpensesToFile();
                default -> System.out.println("Invalid choice. Try again.");
            }
        } while (choice != 6);
    }

    private static void addExpense() {
        System.out.print("Enter category (Food, Travel, etc.): ");
        String category = scanner.nextLine();

        System.out.print("Enter amount (₹): ");
        double amount = scanner.nextDouble();
        scanner.nextLine(); // consume newline

        System.out.print("Enter description: ");
        String description = scanner.nextLine();

        LocalDate date = LocalDate.now(); // use current date

        Expense expense = new Expense(category, amount, date, description);
        expenses.add(expense);

        System.out.println("Expense added successfully.");
    }

    private static void viewExpenses() {
        System.out.println("\n--- All Expenses ---");
        if (expenses.isEmpty()) {
            System.out.println("No expenses recorded.");
        } else {
            for (Expense e : expenses) {
                System.out.println(e);
            }
        }
    }

    private static void filterByMonth() {
        System.out.print("Enter month (1-12): ");
        int month = scanner.nextInt();
        scanner.nextLine();

        System.out.println("\n--- Expenses in " + Month.of(month) + " ---");
        boolean found = false;
        for (Expense e : expenses) {
            if (e.getDate().getMonthValue() == month) {
                System.out.println(e);
                found = true;
            }
        }
        if (!found) {
            System.out.println("No expenses found for this month.");
        }
    }

    private static void showTotalExpenses() {
        double total = 0;
        for (Expense e : expenses) {
            total += e.getAmount();
        }
        System.out.println("Total Expenses: ₹" + total);

        if (monthlyBudget > 0) {
            System.out.println("Monthly Budget: ₹" + monthlyBudget);
            if (total > monthlyBudget) {
                System.out.println("⚠️ You have exceeded your budget by ₹" + (total - monthlyBudget));
            } else {
                System.out.println("✅ You are within your budget.");
            }
        }
    }

    private static void setMonthlyBudget() {
        System.out.print("Set your monthly budget (₹): ");
        monthlyBudget = scanner.nextDouble();
        scanner.nextLine();
        System.out.println("Budget set successfully.");
    }

    private static void saveExpensesToFile() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_NAME))) {
            for (Expense e : expenses) {
                writer.write(e.toCSV());
                writer.newLine();
            }
            System.out.println("Expenses saved to file. Goodbye!");
        } catch (IOException e) {
            System.out.println("Error saving expenses: " + e.getMessage());
        }
    }

    private static void loadExpensesFromFile() {
        File file = new File(FILE_NAME);
        if (!file.exists()) return;

        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = reader.readLine()) != null) {
                Expense e = Expense.fromCSV(line);
                expenses.add(e);
            }
            System.out.println("Loaded " + expenses.size() + " expenses from file.");
        } catch (IOException e) {
            System.out.println("Error loading expenses: " + e.getMessage());
        }
    }
}
